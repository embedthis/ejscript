{
    title:  'Statements',
    crumbs: [
        { 'Language Guide': 'index.html' },
    ],
}
            <h1>Ejscript Statements</h1>
            <p>Ejscript implements the full set of statements defined by the ECMAScript specification. Ejscript
            statements are similar to their C/C++ counterparts but with some object oriented additions. Statements
            represent the body of an Ejscript program by combining logic with expressions.</p>
            <p><a id="overview"></a></p>
            <h2 >Statement Overview</h2>
            <p>The following table describes the major statements supported by Ejscript. See after the table a more
            detailed description of each statement.</p>
            <table title="statements" class="ui table segment">
                <thead>
                    <tr>
                        <th>Statement</th>
                        <th class="eight wide">Syntax</th>
                        <th>Brief Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>;</td>
                        <td>;</td>
                        <td>Empty statement. Do nothing.</td>
                    </tr>
                    <tr>
                        <td>break</td>
                        <td>break label</td>
                        <td>Jump to the designated label. (Not supported)</td>
                    </tr>
                    <tr>
                        <td><a href="#switch">case</a></td>
                        <td>case expression:</td>
                        <td>Define a case block inside a switch statement.</td>
                    </tr>
                    <tr>
                        <td><a href="#cast">cast</a></td>
                        <td>variable cast Type</td>
                        <td>Cast the variable to the specified type.</td>
                    </tr>
                    <tr>
                        <td>continue</td>
                        <td>continue</td>
                        <td>Continue the loop at the top of the loop.</td>
                    </tr>
                    <tr>
                        <td><a href="#try">catch</a></td>
                        <td>catch (error) { body }</td>
                        <td>Catch an exception.</td>
                    </tr>
                    <tr>
                        <td><a href="#class">class</a></td>
                        <td>class className { body }</td>
                        <td>Define a new class.</td>
                    </tr>
                    <tr>
                        <td><a href="#switch">default</a></td>
                        <td>default:</td>
                        <td>Begins the default case for a switch statement.</td>
                    </tr>
                    <tr>
                        <td>delete</td>
                        <td>delete property;</td>
                        <td>Delete the named property (or variable).</td>
                    </tr>
                    <tr>
                        <td>do</td>
                        <td>do { body } while</td>
                        <td>Do / while statement</td>
                    </tr>
                    <tr>
                        <td><a href="#try">finally</a></td>
                        <td>finally { body }</td>
                        <td>Define a try / finally code block that is always executed.</td>
                    </tr>
                    <tr>
                        <td><a href="#for">for</a></td>
                        <td>for (init; condition; increment)
                        <br />
                        statement</td>
                        <td>Standard for loop.</td>
                    </tr>
                    <tr>
                        <td><a href="#forIn">for (.. in</a></td>
                        <td>for (variable in object)
                        <br />
                        statement</td>
                        <td>Iterate over all property names in an object.</td>
                    </tr>
                    <tr>
                        <td class="nowrap"><a href="#forEach">for each</a></td>
                        <td>for each (variable in object)
                        <br />
                        statement</td>
                        <td>Iterate over all properties in an object.</td>
                    </tr>
                    <tr>
                        <td><a href="#function">function</a></td>
                        <td>function [get | set] name([arg1 [... , arg2])
                        <br />
                        { statements }</td>
                        <td>Define a function.</td>
                    </tr>
                    <tr>
                        <td><a href="#if">if / else</a></td>
                        <td>if (expression)
                        <br />
                        statement</td>
                        <td>Conditionally execute a statement.</td>
                    </tr>
                    <tr>
                        <td><a href="#interface">interface</a></td>
                        <td>interface Name { body }</td>
                        <td>Define a type interface.</td>
                    </tr>
                    <tr>
                        <td><a href="#var">let</a></td>
                        <td>let identifier [ = value ] [... , identifier [ = value]];</td>
                        <td>Declare and initialize block scope variables.</td>
                    </tr>
                    <tr>
                        <td><a href="#module">module</a></td>
                        <td>module name { block }</td>
                        <td>Group a block of code as a module.</td>
                    </tr>
                    <tr>
                        <td>new</td>
                        <td>new ClassName(args)</td>
                        <td>Create a new object instance based upon a class.</td>
                    </tr>
                    <tr>
                        <td><a href="#return">return</a></td>
                        <td>return [expression];</td>
                        <td>Return a value from a function.</td>
                    </tr>
                    <tr>
                        <td>super</td>
                        <td>super(args)</td>
                        <td>Invoke the super constructor. Also used to refer to the super type.</td>
                    </tr>
                    <tr>
                        <td><a href="#switch">switch</a></td>
                        <td>switch (expression) { body }</td>
                        <td>Multi-case conditional switch.</td>
                    </tr>
                    <tr>
                        <td>throw</td>
                        <td>throw new ExceptionClass()</td>
                        <td>Throw an exception.</td>
                    </tr>
                    <tr>
                        <td><a href="#try">try</a></td>
                        <td>try { body }</td>
                        <td>Execute code within an exception try / catch handler.</td>
                    </tr>
                    <tr>
                        <td><a href="#use">use</a></td>
                        <td>use pragmas</td>
                        <td>Define program pragmas.</td>
                    </tr>
                    <tr>
                        <td><a href="#var">var</a></td>
                        <td>var identifier [ = value ] [... , identifier [ = value]];</td>
                        <td>Declare and initialize variables.</td>
                    </tr>
                </tbody>
            </table><a id="class"></a>
            <h2 >class</h2>
            <p>Ejscript provides a familiar class paradigm as a convenient wrapper over classical prototype-based
            inheritance. Ejscript classes support single inheritance and are similar to the classes provided in
            ActionScript and other languages such as Java.</p>
            <pre class="ui code segment">
class Shape {
    var x, y
    var color
}
class Circle extends Shape {
    var radius
}
circle = new Circle
</pre>
            <p>Unlike Java or .NET, classes are run-time objects themselves and are accessible as global objects.
            Static methods are implemented as functions contained in the run-time class objects.</p>
            <h3>Scoping Visibility</h3>
            <p>Inside classes, properties and methods can be annotated with the visibility qualifiers:</p>
            <ul>
                <li>public &mdash; Visible to all</li>
                <li>internal &mdash; Visible throughout the current file</li>
                <li>private &mdash; Visible only inside the defining class</li>
                <li>protected &mdash; Visible only inside the defining class and subclasses</li>
            </ul>
            <p>The default visibility qualifier is "internal". These visibility qualifiers are implemented using the
            namespace facility and so the "use default namespace public" statement will change the default qualifier
            for all subsequent declarations.</p>
            <pre class="ui code segment">
class Shape {
    protected var x, y              /* Visible to any subclasses */
    private var color               /* Private to this class */
    use default namespace public    /* Default declarations public after here */
    function show() {
    }
    private inner() { }             /* Private function */
}
</pre><a id="cast"></a>
            <h2 >cast</h2>
            <p>To force a type conversion from one type to another, use the <b>cast</b> operator.</p>
            <pre class="ui code segment">
n = "1234" cast Number
Reflect(n).typeName
</pre>
            <p>This will cast the string "1234" to a number and assign the result to "n". It then uses the Reflection
            API to print the type of n.</p><a id="for"></a>
            <h2 >for</h2>
            <p>The <b>for</b> statement provides the basic looping construct for Ejscript. Similar to the C for loop it
            implements an initialization, conditional and increment phases of the statement. The <b>for</b> statement
            also provides a <a href="#forIn"><b>for / in</b></a> construct for iterating or enumerating elements of an
            object.</p>
            <pre class="ui code segment">
for (initialization; conditional; increment)<br />    statement
</pre>
            <p>For example:</p>
            <pre class="ui code segment">
for (let i = 0; i &lt; 10; i++) {<br />    print("i is " + i)<br />}
</pre>
            <p>You can put any expression or statement in the initialization or increment sections. In this example, we
            simply define a variable and initialize it to zero in the initialization section and increment it
            each time after the statement body is executed. The conditional expression will evaluate to a boolean value
            which if true, allows the statement body to be executed. The increment expression is evaluated after the
            statement body is executed and before the conditional is re-tested.</p><a id="forIn"></a>
            <h2 >for .. in</h2>
            <p>The <b>for in</b> statement is a powerful variant of the <b>for</b> statement that allows you to iterate
            over all the property names in an object. It uses the following syntax:</p>
            <pre class="ui code segment">
for (variable in object)<br />    statement
</pre>
            <p>This statement will execute the statement body for each property name in the object. Each time, the
            variable will be set to the name of the next property in the object. The order of the walk through all the
            properties is determined by the order of property creation. NOTE: it will not be set to the property value,
            but will be set to the property name. For example:</p>
            <pre class="ui code segment">
for (let v in customer) {<br />    print("customer." + v + " = " + customer[v])<br />}
</pre>
            <p>This will print "customer.propertyName = value" for each property defined in the customer
            object.</p><a id="forEach"></a>
            <h2 >for each .. in</h2>
            <p>The <b>for each</b> statement allows you to enumerate the property values in an object. It uses the
            following syntax:</p>
            <pre class="ui code segment">
for each (variable in object)<br />    statement
</pre>
            <p>This statement will execute the statement body for each property value in the object. Each time, the
            variable will be set to the next property value in the object. The order of the walk through all the
            properties is according to the order of property creation.</p>
            <pre class="ui code segment">
for each (var v in customer) {<br />    print(v)<br />}
</pre><a id="function"></a>
            <h2 >function</h2>
            <p>The <b>function</b> statement defines a new global function according to the syntax:</p>
            <pre class="ui code segment">
function name([arg1 [... , arg2]) {<br />    statements<br />}
</pre>
            <p>The function name must be an identifier and not a reserved word and is followed by an optional list of
            arguments. Between braces, a set of statements define the function body. For example:</p>
            <pre class="ui code segment">
function min(arg1, arg2) {<br />    if (arg1 &lt; arg2) {<br />        return arg1<br />    } else {<br />        return arg2<br />    }<br />}
</pre>
            <p>Function declarations can also be nested, i.e. a function may be defined in the statement body within an
            outer function. In this manner, the inner function will only be visible within the scope of the outer
            function.</p>
            <p>When the function is invoked, a new local variable store is created so that any variables declared and
            used in the function will be private to the function. Functions invoke other functions and each function
            will have its own local variables. If a variable is assigned to without using the <b>var</b> statement, the
            variable will be created in the global variable store.</p>
            <p>When functions are defined within a class, they become methods of that class and are only accessible via
            instances of the class. If the function is declared to be static, it requires a class object
            instance.</p><a id="if"></a>
            <h2 >if / else</h2>
            <p>The <b>if</b> statement is the primary conditional execution ability with Ejscript. It takes the
            form:</p>
            <pre class="ui code segment">
if (expression) <br />    statement<br />[ else statement ]
</pre>
            <p>The expression is evaluated and if true, the first statement is executed. If an <b>else</b> phrase is
            added and the expression evaluates to false, then the <b>else</b> statement will be executed.</p>
            <p>Statements may be grouped using braces. For example:</p>
            <pre class="ui code segment">
if (i &lt; j) {<br />    print("i is " + i)<br />    print("j is " + j)<br />} else {<br />    // Do something<br />}
</pre>
            <p>The conditional expression may be a compound conditional expression. For example:</p>
            <pre class="ui code segment">
i = 0<br />j = 1<br />if (i &lt; j || j != 0 || getToday() == "sunday") {<br />    // Do something<br />}
</pre>
            <p>Ejscript uses lazy evaluation where if the first expression "i &lt; j" is true, then the following
            expressions will not be evaluated. In the example above, getToday() will not be called as "i" is less
            than "j".</p>
            
            <a id="interface"></a>
            <h2 >interface</h2>
            <p>An <b>interface</b> definition creates a type object that may be used to specify the required methods
            and properties for an implementing class. Unlike Java interface, Ejscript interfaces may contain functions
            with actual code. A class then has a choice to either implement an interface by using the <b>implements</b>
            keyword, or it can extend the interface by using the <b>extends</b> keyword.</p>
            <pre class="ui code segment">
interface Shape {
    function move()
}
class Chape implements Shape {
    function move() {
    }
}
</pre><a id="module"></a>
            <h2 >module</h2>
            <p>JavaScript is sometimes beset by scope and name-conflict issues. Particularly when using mash-ups or
            when "programming in-the-large", the lack of a comprehensive name resolution facility is a great
            drawback.</p>
            <p>Ejscript rectifies this problem by providing a powerful module facility. This consists of <b>module</b>
            and <b>require</b> directives, and a module packaging mechanism and loader.</p>
            <p>Grouping related declarations inside a module block instructs the compiler to create a module and to
            qualify the contained declarations with the module name as a namespace.</p>
            <pre class="ui code segment">
module MyStuff {
    var x = "mine"
}
module YourStuff {
    var x = "yours"
}
</pre>
            <p>This code creates two modules and two variables both called <b>x</b>. However, it qualifies each
            "x" with the name of the module. If your code utilizes the <b>require</b> directive, you can
            specify which module you want to use and which variable "x" you need.</p>
            <pre class="ui code segment">
<b>home&gt;</b> ejs
require MyStuff
print(x)
<b>mine</b>
</pre>
            <p>Multiple require directives can be employed and they stack and nest as expected. A require
            directive only applies to the block in which it is defined and from the point of declaration
            onward.</p>
            
            
            <a id="require"></a>
            <h2 >require</h2>
            <p>To load and access a module, you need to add a <b>require</b> pragma to you code.</p>
            <pre class="ui code segment">
require moduleName
</pre>
            <p>This will add the module named "moduleName" to your program. This adds the module to the set of open
            namespaces in the current file scope.</p>
            
            
            <a id="return"></a>
            <h2 >return</h2>
            <p>The <b>return</b> statement is used to supply a return value inside a function. The <b>return</b>
            statement may appear without an expression to cause the function's execution to terminate and return to the
            caller.</p>
            <p>A <b>return</b> expression may be a simple value or it may be an object reference. For example:</p>
            <pre class="ui code segment">
function myFunc(x) {<br />    if (x == 0) {<br />        return null<br />    }<br />    return new MyObj(x)<br />}
</pre><a id="switch"></a>
            <h2 >Switch, Case, Default</h2>
            <p>The <b>switch</b> statement provides a multi-case conditional statement. It can switch on numeric or
            string valued types. Like <b>switch</b> in all classical C languages, control flow falls through each case
            statement to the one below. Thus you must use a <b>break</b> statement if you want each case block to be
            discrete.</p>
            <pre class="ui code segment">
switch (x) {
case "Today"
    /* Do Something */
    break
case "Tomorrow"
    /* Do Something else */
    break
default:
    break
}
</pre><a id="try"></a>
            <h2 >Try, Catch, Finally</h2>
            <p>The <b>try</b> statement encapsulates a block of code and captures any exceptions for handling by
            relevant <b>catch</b> or <b>finally</b> blocks. If an unhandled exception occurs while executing the
            <b>try</b> block code, a non-local goto will occur and control will resume at the first qualifying
            <b>catch</b> if a <b>catch</b> block is defined.</p>
            <p>Regardless of whether an exception occurs or not, any code in a <b>finally</b> block will be executed
            after the <b>try</b> block. <b>Finally</b> blocks are a convenient way of freeing resources and doing
            cleanup regardless of whether an exception occurs or not.</p>
            <pre class="ui code segment">
try {
    j = 0
    x = 100 / j
    /* Won't get here */
}
catch (error) {
    /* Handle error here. The error variable has the exception object */
}
finally {
}
</pre>
            <p><b>Catch</b> blocks can omit their argument variable or they can annotate it with a type qualifier. If
            the type is qualified, then multiple <b>catch</b> blocks, each with a different type specifier, can be
            used. This is an Ejscript enhancement over standard ECMAScript.</p>
            <pre class="ui code segment">
try {
    doSomething()
    throw new MyError("My custom Error")
    /* Won't get here */
}
catch (error: MyError) {
    /* Only get here for my custom errors */
}
catch (error){
    /* Handle error here */
}
</pre>
            <p><b>Try</b> blocks can be nested arbitrarily.</p><a id="use"></a>
            <h2 >use</h2>
            <p>The <b>use</b> statement applies various modifiers to the code environment. These are typically called
            <b>pragma</b> directives.</p>
            <pre class="ui code segment">
use namespace
</pre>
            <h3>Use Default Namespace</h3>
            <p>To set the default namespace for all following directives, add the <b>use default namespace</b>
            pragma.</p>
            <pre class="ui code segment">
use default namespace NAME
</pre>
            <p>This will add the namespace to the current block scope as the top most (first) namespace to search. NAME
            can be either a literal namespace in quotes or a namespace variable.</p>
            <h3>Use Strict</h3>
            <p>To set the compiler to employ more strict type checking and validation, add the <b>use strict</b>
            pragma.</p>
            <pre class="ui code segment">
use strict
</pre>
            <p>This will put the current source file into strict type checking mode. In strict mode all variables must
            be declared and typed.</p>
            <h3>Use Standard</h3>
            <p>To set the compiler into standard relaxed type checking, use the <b>use standard</b> pragma.</p>
            <pre class="ui code segment">
use standard
</pre>
            <p>This will put the current source file into standard type checking mode. In this mode, variables it is
            optional if variables are pre-declared and/or type annotated.</p>
            
            <a id="var"></a>
            <h2 >var and let</h2>
            <p>The <b>var</b> statement declares variables and initializes their values. Although not strictly required
            by the language to pre-declare variables, it is good practice to do so.</p>
            <p>The <b>var</b> statement defines variables at the top level of the current function, class or file. The
            <b>let</b> statement defines variables inside the current block only. It is useful to use <b>let</b>
            declarations for temporary variables to avoid name clashes with other declarations of the same name.</p>
            <p>The <b>var</b> statement takes the form:</p>
            <pre class="ui code segment">
var identifier [ = value ] [... , identifier [ = value]];
let identifier [ = value ] [... , identifier [ = value]];
</pre>
            <p>For example:</p>
            <pre class="ui code segment">
var x = 2<br />var y = 4<br />var a, b = 2, c = "sunny day";
{
    /* This defines another local "x" just for this block */
    let x = 7
}
print(x)    /* This prints the original x == 2 */   
</pre>
            <p>If an initializer value is not defined, the identifier will be set to the <b>undefined</b> value.</p>
            <p>If the <b>var</b> statement is used within a function, the variable is defined in the local variable
            store. If it is used outside a function, the variable is defined on the global store. If a variable is
            assigned without a <b>var</b> statement, then the variable is created on the global store. For example:</p>
            <pre class="ui code segment">
x = 2<br /><br />function myFunc() {<br />    x = 7<br />}<br /><br />println("x is " + x);
</pre>
            <p>This code snippet will print "x is 7".</p>
