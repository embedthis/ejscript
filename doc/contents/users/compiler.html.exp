{
    title:  'Compiler',
    crumbs: [
        { "User's Guide": "index.html" },
    ],
}
            <h1>Using the Compiler</h1>
            <p>Ejscript programs can be run on-demand by using the <a href="shell.html"><strong>ejs</strong></a>
            command or they can be compiled once and the resulting byte code can be run without having to recompile the
            program. For production use, it is typically many times faster and more compact to pre-compile scripts.</p>
            <p>The Ejscript compiler is called <strong>ejsc</strong> and it compiles Ejscript files to produce binary
            byte code files called Ejscript module files that can then be run by the <a href=
            "shell.html"><em>ejs</em></a> shell command.</p>
            <h2><a id="inputs"></a>Inputs and Outputs</h2>
            <p>The ejsc compiler is both a compiler and link editor in that inputs can be either Ejscript source files
            or Ejscript module files that have come from previous invocations of ejsc. Outputs will be one or more
            Ejscript module files that contain byte code.</p>
            <p>An output module file will be created for each Ejscript module directive encountered in input scripts
            during the compilation. A module file will also be created for any global variables or functions declared
            outside any module directive. These global declarations will go into the "default" module that is specially
            reserved for global declarations. Each module file will be named the same as the module directive name, but
            with a ".mod" extension.</p>
            <p>For example, if two script files contained the following code:</p>
            <h3>geometry.es:</h3>
            <pre class="ui code segment">
module "acme.geometry" {
  class Shape {}
}
</pre>
            <h3>widgets.es</h3>
            <pre class="ui code segment">
module "acme.widgets" { 
  class Widget {}
}
</pre>
            <p>and these scripts were compiled as follows:</p>
            <pre class="ui code segment">
ejsc geometry.es widget.es
</pre>
            <p>then two module files would be created: <em>acme.geometry.mod</em> and <em>acme.widgets.mod</em>.</p>
            <h2><a id="linking"></a>Linking</h2>
            <p>If ejsc is invoked with the --out switch, all input files, input modules and any dependent modules are
            merged together into a single output file. The modules retain their logical naming, but are contained in a
            single module file. When that module file is loaded, all the contained modules will be available to the
            program. In the example above, if we typed:</p>
            <pre class="ui code segment">
ejsc --out acme.mod geometry.es widgets.es
</pre>
            <p>then one module file would be produced called <em>acme.mod</em>.</p>
            <h3><a id="optimization"></a>Link Optimization</h3>
            <p>Using the --out switch not only creates a convenient way to package an entire application as a single
            file, it also permits many optimizations by merging the entire application and its dependent modules into a
            single bundle. The ejsc compiler will attempt to early-bind all possible property and function references.
            Binding means resolving the reference to the underlying storage for a property or function and doing this
            at compile time usually results in much faster execution. When using --out, the compiler can early bind all
            global variables, functions and type references resulting in a much smaller and faster application.
            However, you must not subsequently load other modules that have global declarations, otherwise the Ejscript
            loader will throw an exception. Thus, the --out switch must only be used to create a complete application
            including all the application's required modules.</p>
            <h2><a id="standards"></a>Standards Compliance</h2>
            <p>The ejsc compiler supports two modes of compliance:</p>
            <ol>
                <li>ECMAScript compliant compilation</li>
                <li>Enhanced compliance mode</li>
            </ol>
            <p>By default the ejsc command runs in enhanced compliance mode. This mode corrects several issues with
            JavaScript that remain in the language due to browser compatibility requirements. Ejscript, by targeting
            non-browser environments can rectify these issues without impact to legacy applications. These changes
            are:</p>
            <ul>
                <li>Assignments to non-existent properties create local variables rather than globals.</li>
                <li>The == and != operators will perform like their more rigorous counterparts === and !===.</li>
                <li>All var declarations are always block local in scope and are equivalent to the newer let
                declarations.</li>
                <li>The eval command is not supported.</li>
            </ul>
            <p>Using the --ecma switch changes the default compliance mode to be ECMAScript.</p>
            <h2><a id="options"></a>Command Options</h2>
            <p>The ejsc command may be invoked with the following command options:</p>
            <pre class="ui code segment">
<strong>ejsc</strong> [--debug] [--dir directory] [--doc] [--merge] [--modver version] 
    [--noout] [--optimize level] [--out filename] [--parse] 
    [--require modules] [--searchPath ejsPath] [--standard] 
    [--strict] [--version] [--warn level] 
    <b>files or modules ...</b>
</pre>The ejs command will parse and execute the given <strong>file</strong> with the supplied arguments passed into
the App.args property.
            <table title="args" class="ui table segment">
                <thead>
                    <tr>
                        <th class="four wide">Switch</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                <tr>
                    <td>--debug</td>
                    <td>Run in debug mode with symbolic stack backtraces in exceptions.</td>
                </tr>
                <tr>
                    <td>--doc</td>
                    <td>Include documentation strings from input scripts in the output modules. The ejsmod command can
                    then generate HTML documentation using these doc strings. The format of the doc strings resembles
                    that of Javadoc.</td>
                </tr>
                <tr>
                    <td>--merge</td>
                    <td>Merge dependent input modules into the output.</td>
                </tr>
                <tr>
                    <td>--modver version</td>
                    <td>Set the default module version.</td>
                </tr>
                <tr>
                    <td>--noout</td>
                    <td>Don't generate any output modules.</td>
                </tr>
                <tr>
                    <td>--parse</td>
                    <td>Just parse the source scripts. Don't verify, execute or generate output. Useful to check the
                    script syntax only.</td>
                </tr>
                <tr>
                    <td class="nowrap">--optimize level</td>
                    <td>Set the code optimization level. Level values must be between 0 (least) and 9 (most). Default
                    is 9.</td>
                </tr>
                <tr>
                    <td class="nowrap">--require modules</td>
                    <td>Required modules to pre-load before compiling.</td>
                </tr>
                <tr>
                    <td class="nowrap">--searchPath ejsPath</td>
                    <td>
                        <p>Override the module search path. The module search path is a set of directories that the ejs
                        command will use when locating and loading Ejscript modules. Given a module named "a.b.c" in a
                        script, ejs will use the following search strategy to locate the module:</p>
                        <p>1. Search for a module file named "a.b.c.mod"</p>
                        <p>2. Search for a module file named "a/b/c.mod"</p>
                        <p>3. Search for a module file named "a.b.c.mod" in EJSPATH</p>
                        <p>4. Search for a module file named c.mod in EJSPATH</p>
                        <p>The search path is initially specified via the environment variable EJSPATH and may be
                        overridden via the --searchPath ejsPath switch. EJSPATH and the ejsPath command line value are
                        similar to the system PATH formats. On windows, path segments are separated by ";" and on
                        Linux, Unix, FreeBSD and MAC, the path segments are separated by ":" delimiters.</p>
                    </td>
                </tr>
                <tr>
                    <td>--standard</td>
                    <td>Run scripts in standard mode. Ejscript supports two parsing modes: strict and standard.
                    Standard mode does not require variables be declared and typed before use.</td>
                </tr>
                <tr>
                    <td>--strict</td>
                    <td>Run scripts in standard mode. Ejscript supports two parsing modes: strict and standard. Strict
                    mode requires that all variables be declared and typed.</td>
                </tr>
                <tr>
                    <td>--version</td>
                    <td>Print the ejs command version and exit.</td>
                </tr>
                <tr>
                    <td>--warn level</td>
                    <td>Set the compiler warning verbosity level. Level values must be between 0 (least verbose) and 9
                    (most). Default is 0.</td>
                </tr>
                </tbody>
            </table>
